#pragma kernel VolumeRayCasting

struct BoundingBox {
	float3 center;
	float3 origin;
	float3 size;
	float3 dataSize;
	float3 resoloution;
	float3 gridSpacing;
};

#define MAX_STEP 500
#define MAX_DIST 300
#define SURF_DIST 0.01
#define THREAD_NUM 32
#define PI 3.14159265358979323846264338327950288

float interpolation = 0.5;
float time;
float3 lightPos;
float3 cameraPos;
float2 resoloution;
float4 lightColor;
float3 cameraEuler;

StructuredBuffer<BoundingBox> boundingBox;
StructuredBuffer<float> density;
RWTexture2D<float4> Result;
RWTexture2D<float4> Test;
Texture2D<float4> Source;

float lerp(float f0, float f1, float t) {
	return (1 - t) * f0 + t * f1;
}

float bilerp(float f00, float f10, float f01, float f11, float tx, float ty) {
	return lerp(lerp(f00, f10, tx), lerp(f01, f11, tx), ty);
}

float trilerp(float f000, float f100, float f010, float f110, float f001, float f101, float f011, float f111,
	float tx, float ty, float tz) {
	return lerp(bilerp(f000, f100, f010, f110, tx, ty), bilerp(f001, f101, f011, f111, tx, ty), tz);
}

float3 Rot(float3 euler, float3 dir) {
	euler = euler * PI / 180;
	float4x4 rotZMatrix = {
		cos(euler.z), -sin(euler.z), 0, 0,
		sin(euler.z), cos(euler.z), 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1
	};
	float4x4 rotYMatrix = {
		cos(euler.y), 0, sin(euler.y), 0,
		0, 1, 0, 0,
		-sin(euler.y), 0, cos(euler.y), 0,
		0, 0, 0, 1
	};
	float4x4 rotXMatrix = {
		1, 0, 0, 0,
		0, cos(euler.x), -sin(euler.x), 0,
		0, sin(euler.x), cos(euler.x), 0,
		0, 0, 0, 1
	};
	float4x4 rotMatrix = mul(mul(rotZMatrix, rotYMatrix), rotXMatrix);
	return mul(rotMatrix, float4(dir.xyz, 1)).xyz;
}

int Convert3DTo1D(int3 idx, float3 ds) {
	return (int)(idx.z * ds.y * ds.x + idx.y * ds.x + idx.x);
}

float GetCubeDist(float3 p, float3 c, float3 size) {
	float x = abs(p.x - c.x) - size.x;
	float y = abs(p.y - c.y) - size.y;
	float z = abs(p.z - c.z) - size.z;
	float e = length(max(float3(x, y, z), 0));
	float i = min(max(max(x, y), z), 0);
	return e + i;
}

float3 GetNormalBoundBox(float3 p) {
	float d = GetCubeDist(p, boundingBox[0].center, boundingBox[0].size);
	float2 e = float2(0.01, 0);
	float3 n = d - float3(
		GetCubeDist(p - e.xyy, boundingBox[0].center, boundingBox[0].size),
		GetCubeDist(p - e.yxy, boundingBox[0].center, boundingBox[0].size),
		GetCubeDist(p - e.yyx, boundingBox[0].center, boundingBox[0].size));
	return normalize(n);
}

float RayCasting(float3 ro, float3 rd) {
	float dO = 0;
	float dist = 0;
	[loop]
	for (int i = 0; i < MAX_STEP; i++) {
		float3 p = ro + dO * rd;
		dist = GetCubeDist(p, boundingBox[0].center, boundingBox[0].size);
		dO += abs(dist);
		if (abs(dist) < SURF_DIST || dO > MAX_DIST) {
			break;
		}
	}
	return dO;
}

void GetAxisIndex(float x, float min, float max, out int i, out float f) {
	float s = floor(x);
	float offset = min;
	min -= offset;
	max -= offset;
	s -= offset;
	if (max == min) {
		i = (int)min;
		f = 0;
	}
	else if (s >= max - 1) {
		i = (int)max - 1;
		f = 1;
	}
	else if (s < min) {
		i = (int)min;
		f = 0;
	}
	else {
		i = (int)s;
		f = x - s;
	}
}

int3 Get3DBoxIndex(float3 pos) {
	float3 normalizedPos = (pos - boundingBox[0].origin) / boundingBox[0].gridSpacing;
	float3 ds = boundingBox[0].resoloution;
	int i, j, k;
	float fx, fy, fz;
	GetAxisIndex(normalizedPos.x, 0, ds.x, i, fx);
	GetAxisIndex(normalizedPos.y, 0, ds.y, j, fy);
	GetAxisIndex(normalizedPos.z, 0, ds.z, k, fz);
	return int3(i, j, k);
}

float3 Gradient(int3 idx, float value) {
	float3 gs = boundingBox[0].gridSpacing;
	float3 ds = boundingBox[0].dataSize;
	int right = Convert3DTo1D(min(idx + int3(1, 0, 0), ds - float3(1, 1, 1)), ds);
	int up = Convert3DTo1D(min(idx + int3(0, 1, 0), ds - float3(1, 1, 1)), ds);
	int forward = Convert3DTo1D(min(idx + int3(0, 0, 1), ds - float3(1, 1, 1)), ds);
	return -normalize(float3(
		(density[right] - value) / gs.x,
		(density[up] - value) / gs.y,
		(density[forward] - value) / gs.z)
	);
}

float4 Color_transfer(float value) {
	float ki = 1;
	float3 low = float3(0, 0, 0);
	float3 high = float3(1, 1, 1);
	float alpha = (exp(value * ki) - 1.0) / (exp(ki) - 1.0);
	return float4((value * high + (1.0 - value) * low).xyz, alpha);
}

float4 VoxelSampleAlphaBending(float3 entry, float3 end, float3 rd, float4 bgColor) {
	float3 current = entry;
	float3 gs = boundingBox[0].gridSpacing;
	float step = min(gs.x, min(gs.y, gs.z)) * 0.5;
	float3 ds = boundingBox[0].dataSize;
	float3 materialColor = float3(0.5, 0.5, 0.5);
	float4 color = float4(0, 0, 0, 0);
	[loop]
	for (int i = 0; i < MAX_STEP; i++) {
		current += rd * step;
		int3 idx3 = Get3DBoxIndex(current);
		int idx = Convert3DTo1D(idx3, ds);
		float den = density[idx];
		float4 c = Color_transfer(den);
		color.rgb = (1 - c.a * c.rgb + (1 - c.a) * color.rgb * color.a) * materialColor;
		color.a = c.a + (1 - c.a) * color.a;
		if (color.a >= 1)
			break;
	}
	color.rgb = color.a * color.rgb + (1 - color.a) * bgColor.rgb;
	color.a = 1;
	return color;
}

[numthreads(THREAD_NUM, THREAD_NUM, 1)]
void VolumeRayCasting(uint3 id : SV_DispatchThreadID)
{
	Result[id.xy] = Source[id.xy];
	float3 ro = cameraPos;
	float2 uv = (id.xy - 0.5 * resoloution) / resoloution.y;
	float3 rd = Rot(cameraEuler, normalize(float3(uv.xy, 1)));
	float d1 = RayCasting(ro, rd);
	if (d1 < MAX_DIST) {
		float3 entry = ro + rd * d1;
		float3 n1 = GetNormalBoundBox(entry);
		float d2 = RayCasting(entry - n1 * SURF_DIST * 2, rd);
		if (d2 < MAX_DIST) {
			float3 end = entry - n1 * SURF_DIST * 2 + rd * d2;
			float4 color = VoxelSampleAlphaBending(entry - n1 * SURF_DIST * 2, end, rd, Source[id.xy]);
			//float4 diff = DiffuseBoundingBox(end);
			Result[id.xy] = color;
		}
	}
}
